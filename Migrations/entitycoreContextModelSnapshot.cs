// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PrivateLessons.Data;

namespace PrivateLessons.Migrations
{
    [DbContext(typeof(entitycoreContext))]
    partial class entitycoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("PrivateLessons.Models.answers", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("flag")
                        .HasColumnType("boolean");

                    b.Property<int>("question_id")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("answers");
                });

            modelBuilder.Entity("PrivateLessons.Models.book", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("subject_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("book");
                });

            modelBuilder.Entity("PrivateLessons.Models.exam", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("max_marks")
                        .HasColumnType("double precision");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("subject_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("exam");
                });

            modelBuilder.Entity("PrivateLessons.Models.exam_question", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("exam_id")
                        .HasColumnType("integer");

                    b.Property<int>("question_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("exam_id");

                    b.HasIndex("question_id");

                    b.ToTable("exam_question");
                });

            modelBuilder.Entity("PrivateLessons.Models.question", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("exam_id")
                        .HasColumnType("integer");

                    b.Property<double>("grade")
                        .HasColumnType("double precision");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("question");
                });

            modelBuilder.Entity("PrivateLessons.Models.student_answer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("answer_num")
                        .HasColumnType("integer");

                    b.Property<int>("exam_id")
                        .HasColumnType("integer");

                    b.Property<int>("question_id")
                        .HasColumnType("integer");

                    b.Property<int>("student_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("student_answer");
                });

            modelBuilder.Entity("PrivateLessons.Models.student_exams", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("exam_id")
                        .HasColumnType("integer");

                    b.Property<int>("student_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("student_exams");
                });

            modelBuilder.Entity("PrivateLessons.Models.student_subject_registration", b =>
                {
                    b.Property<int>("student_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("grade")
                        .HasColumnType("double precision");

                    b.Property<int>("subject_id")
                        .HasColumnType("integer");

                    b.HasKey("student_id");

                    b.HasIndex("subject_id");

                    b.ToTable("student_subject_registration");
                });

            modelBuilder.Entity("PrivateLessons.Models.students", b =>
                {
                    b.Property<int>("code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("code");

                    b.ToTable("students");
                });

            modelBuilder.Entity("PrivateLessons.Models.subject", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<string>("place")
                        .HasColumnType("text");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.Property<string>("time")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("subject");
                });

            modelBuilder.Entity("PrivateLessons.Models.subject_teachers", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("subject_id")
                        .HasColumnType("integer");

                    b.Property<int>("teacher_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("subject_id");

                    b.HasIndex("teacher_id");

                    b.ToTable("subject_teachers");
                });

            modelBuilder.Entity("PrivateLessons.Models.teachers", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("salary")
                        .HasColumnType("double precision");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("teachers");
                });

            modelBuilder.Entity("PrivateLessons.Models.user_types", b =>
                {
                    b.Property<int>("type_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("type_name")
                        .HasColumnType("text");

                    b.HasKey("type_id");

                    b.ToTable("user_types");
                });

            modelBuilder.Entity("PrivateLessons.Models.users", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("f_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("l_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<int>("type_id")
                        .HasColumnType("integer");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("PrivateLessons.Models.exam_question", b =>
                {
                    b.HasOne("PrivateLessons.Models.exam", "exam")
                        .WithMany()
                        .HasForeignKey("exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLessons.Models.question", "question")
                        .WithMany()
                        .HasForeignKey("question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrivateLessons.Models.student_subject_registration", b =>
                {
                    b.HasOne("PrivateLessons.Models.students", "students")
                        .WithMany()
                        .HasForeignKey("student_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLessons.Models.subject", "subject")
                        .WithMany()
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrivateLessons.Models.subject_teachers", b =>
                {
                    b.HasOne("PrivateLessons.Models.subject", "subject")
                        .WithMany()
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLessons.Models.teachers", "teachers")
                        .WithMany()
                        .HasForeignKey("teacher_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
